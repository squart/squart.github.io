(function(c) {
	function k(a, b) {
		var d = function(e) {
			e = c[a][e] || [];
			return typeof e == "string" ? e.split(/,?\s+/) : e
		}("getter");
		return c.inArray(b, d) != -1
	}
	c.fn.jPlayer = function(a) {
		var b = typeof a == "string",
			d = Array.prototype.slice.call(arguments, 1);
		if(b && a.substring(0, 1) == "_") return this;
		if(b && k("jPlayer", a, d)) {
			var e = c.data(this[0], "jPlayer");
			return e ? e[a].apply(e, d) : undefined
		}
		return this.each(function() {
			var h = c.data(this, "jPlayer");
			!h && !b && c.data(this, "jPlayer", new c.jPlayer(this, a))._init();
			h && b && c.isFunction(h[a]) && h[a].apply(h, d)
		})
	};
	c.jPlayer = function(a, b) {
		this.options = c.extend({}, b);
		this.element = c(a)
	};
	c.jPlayer.getter = "jPlayerOnProgressChange jPlayerOnSoundComplete jPlayerVolume jPlayerReady getData jPlayerController";
	c.jPlayer.defaults = {
		cssPrefix: "jqjp",
		swfPath: "assets/js",
		volume: 50,
		oggSupport: true,
		nativeSupport: true,
		preload: "none",
		customCssIds: false,
		graphicsFix: false,
		errorAlerts: false,
		warningAlerts: false,
		position: "absolute",
		width: "0",
		height: "0",
		top: "0",
		left: "0",
		quality: "high",
		bgcolor: "#ffffff"
	};
	c.jPlayer._config = {
		version: "1.2.0",
		swfVersionRequired: "1.2.0",
		swfVersion: "unknown",
		jPlayerControllerId: undefined,
		delayedCommandId: undefined,
		isWaitingForPlay: false,
		isFileSet: false
	};
	c.jPlayer._diag = {
		isPlaying: false,
		src: "",
		loadPercent: 0,
		playedPercentRelative: 0,
		playedPercentAbsolute: 0,
		playedTime: 0,
		totalTime: 0
	};
	c.jPlayer._cssId = {
		play: "play",
		pause: "pause",
		stop: "stop",
		loadBar: "load_bar",
		playBar: "play_bar",
		volumeMin: "volume_min",
		volumeMax: "volume_max",
		volumeBar: "volume_bar",
		volumeBarValue: "volume_bar_value"
	};
	c.jPlayer.count = 0;
	c.jPlayer.timeFormat = {
		showHour: false,
		showMin: true,
		showSec: true,
		padHour: false,
		padMin: true,
		padSec: true,
		sepHour: ":",
		sepMin: ":",
		sepSec: ""
	};
	c.jPlayer.convertTime = function(a) {
		var b = new Date(a),
			d = b.getUTCHours();
		a = b.getUTCMinutes();
		b = b.getUTCSeconds();
		d = c.jPlayer.timeFormat.padHour && d < 10 ? "0" + d : d;
		a = c.jPlayer.timeFormat.padMin && a < 10 ? "0" + a : a;
		b = c.jPlayer.timeFormat.padSec && b < 10 ? "0" + b : b;
		return(c.jPlayer.timeFormat.showHour ? d + c.jPlayer.timeFormat.sepHour : "") + (c.jPlayer.timeFormat.showMin ? a + c.jPlayer.timeFormat.sepMin : "") + (c.jPlayer.timeFormat.showSec ? b + c.jPlayer.timeFormat.sepSec : "")
	};
	c.jPlayer.prototype = {
		_init: function() {
			var a = this,
				b = this.element;
			this.config = c.extend({}, c.jPlayer.defaults, this.options, c.jPlayer._config);
			this.config.diag = c.extend({}, c.jPlayer._diag);
			this.config.cssId = {};
			this.config.cssSelector = {};
			this.config.cssDisplay = {};
			this.config.clickHandler = {};
			this.element.data("jPlayer.config", this.config);
			c.extend(this.config, {
				id: this.element.attr("id"),
				swf: this.config.swfPath + (this.config.swfPath != "" && this.config.swfPath.slice(-1) != "/" ? "/" : "") + "Jplayer.swf",
				fid: this.config.cssPrefix + "_flash_" + c.jPlayer.count,
				aid: this.config.cssPrefix + "_audio_" + c.jPlayer.count,
				hid: this.config.cssPrefix + "_force_" + c.jPlayer.count,
				i: c.jPlayer.count,
				volume: this._limitValue(this.config.volume, 0, 100),
				autobuffer: this.config.preload != "none"
			});
			c.jPlayer.count++;
			if(this.config.ready != undefined)
				if(c.isFunction(this.config.ready)) this.jPlayerReadyCustom = this.config.ready;
				else this._warning("Constructor's ready option is not a function.");
			this.config.audio = document.createElement("audio");
			this.config.audio.id = this.config.aid;
			c.extend(this.config, {
				canPlayMP3: !!(this.config.audio.canPlayType ? "" != this.config.audio.canPlayType("audio/mpeg") && "no" != this.config.audio.canPlayType("audio/mpeg") : false),
				canPlayOGG: !!(this.config.audio.canPlayType ? "" != this.config.audio.canPlayType("audio/ogg") && "no" != this.config.audio.canPlayType("audio/ogg") : false),
				aSel: c("#" + this.config.aid)
			});
			c.extend(this.config, {
				html5: !!(this.config.oggSupport ? this.config.canPlayOGG ? true : this.config.canPlayMP3 : this.config.canPlayMP3)
			});
			c.extend(this.config, {
				usingFlash: !(this.config.html5 && this.config.nativeSupport),
				usingMP3: !(this.config.oggSupport && this.config.canPlayOGG && this.config.nativeSupport)
			});
			var d = {
					setButtons: function(g, f) {
						a.config.diag.isPlaying = f;
						if(a.config.cssId.play != undefined && a.config.cssId.pause != undefined)
							if(f) {
								a.config.cssSelector.play.css("display", "none");
								a.config.cssSelector.pause.css("display", a.config.cssDisplay.pause)
							} else {
								a.config.cssSelector.play.css("display", a.config.cssDisplay.play);
								a.config.cssSelector.pause.css("display", "none")
							}
						if(f) a.config.isWaitingForPlay = false
					}
				},
				e = {
					setFile: function(g, f) {
						try {
							a._getMovie().fl_setFile_mp3(f);
							a.config.autobuffer && b.trigger("jPlayer.load");
							a.config.diag.src = f;
							a.config.isFileSet = true;
							b.trigger("jPlayer.setButtons", false)
						} catch(j) {
							a._flashError(j)
						}
					},
					clearFile: function() {
						try {
							b.trigger("jPlayer.setButtons", false);
							a._getMovie().fl_clearFile_mp3();
							a.config.diag.src = "";
							a.config.isFileSet = false
						} catch(g) {
							a._flashError(g)
						}
					},
					load: function() {
						try {
							a._getMovie().fl_load_mp3()
						} catch(g) {
							a._flashError(g)
						}
					},
					play: function() {
						try {
							a._getMovie().fl_play_mp3() && b.trigger("jPlayer.setButtons", true)
						} catch(g) {
							a._flashError(g)
						}
					},
					pause: function() {
						try {
							a._getMovie().fl_pause_mp3() && b.trigger("jPlayer.setButtons", false)
						} catch(g) {
							a._flashError(g)
						}
					},
					stop: function() {
						try {
							a._getMovie().fl_stop_mp3() && b.trigger("jPlayer.setButtons", false)
						} catch(g) {
							a._flashError(g)
						}
					},
					playHead: function(g, f) {
						try {
							a._getMovie().fl_play_head_mp3(f) && b.trigger("jPlayer.setButtons", true)
						} catch(j) {
							a._flashError(j)
						}
					},
					playHeadTime: function(g, f) {
						try {
							a._getMovie().fl_play_head_time_mp3(f) && b.trigger("jPlayer.setButtons", true)
						} catch(j) {
							a._flashError(j)
						}
					},
					volume: function(g, f) {
						a.config.volume = f;
						try {
							a._getMovie().fl_volume_mp3(f)
						} catch(j) {
							a._flashError(j)
						}
					}
				},
				h = {
					setFile: function(g, f, j) {
						a.config.diag.src = a.config.usingMP3 ? f : j;
						a.config.isFileSet && !a.config.isWaitingForPlay && b.trigger("jPlayer.pause");
						a.config.audio.autobuffer = a.config.autobuffer;
						a.config.audio.preload = a.config.preload;
						if(a.config.autobuffer) {
							a.config.audio.src = a.config.diag.src;
							a.config.audio.load()
						} else a.config.isWaitingForPlay = true;
						a.config.isFileSet = true;
						a.jPlayerOnProgressChange(0, 0, 0, 0, 0);
						clearInterval(a.config.jPlayerControllerId);
						if(a.config.autobuffer) a.config.jPlayerControllerId = window.setInterval(function() {
							a.jPlayerController(false)
						}, 100);
						clearInterval(a.config.delayedCommandId)
					},
					clearFile: function() {
						a.setFile("", "");
						a.config.isWaitingForPlay = false;
						a.config.isFileSet = false
					},
					load: function() {
						if(a.config.isFileSet)
							if(a.config.isWaitingForPlay) {
								a.config.audio.autobuffer = true;
								a.config.audio.preload = "auto";
								a.config.audio.src = a.config.diag.src;
								a.config.audio.load();
								a.config.isWaitingForPlay = false;
								clearInterval(a.config.jPlayerControllerId);
								a.config.jPlayerControllerId = window.setInterval(function() {
									a.jPlayerController(false)
								}, 100)
							}
					},
					play: function() {
						if(a.config.isFileSet) {
							if(a.config.isWaitingForPlay) {
								a.config.audio.src = a.config.diag.src;
								a.config.audio.load()
							}
							a.config.audio.play();
							b.trigger("jPlayer.setButtons", true);
							clearInterval(a.config.jPlayerControllerId);
							a.config.jPlayerControllerId = window.setInterval(function() {
								a.jPlayerController(false)
							}, 100);
							clearInterval(a.config.delayedCommandId)
						}
					},
					pause: function() {
						if(a.config.isFileSet) {
							a.config.audio.pause();
							b.trigger("jPlayer.setButtons", false);
							clearInterval(a.config.delayedCommandId)
						}
					},
					stop: function() {
						if(a.config.isFileSet) try {
							b.trigger("jPlayer.pause");
							a.config.audio.currentTime = 0;
							clearInterval(a.config.jPlayerControllerId);
							a.config.jPlayerControllerId = window.setInterval(function() {
								a.jPlayerController(true)
							}, 100)
						} catch(g) {
							clearInterval(a.config.delayedCommandId);
							a.config.delayedCommandId = window.setTimeout(function() {
								a.stop()
							}, 100)
						}
					},
					playHead: function(g, f) {
						if(a.config.isFileSet) try {
							b.trigger("jPlayer.load");
							if(typeof a.config.audio.buffered == "object" && a.config.audio.buffered.length > 0) a.config.audio.currentTime = f * a.config.audio.buffered.end(a.config.audio.buffered.length - 1) / 100;
							else if(a.config.audio.duration > 0 && !isNaN(a.config.audio.duration)) a.config.audio.currentTime = f * a.config.audio.duration / 100;
							else throw "e";
							b.trigger("jPlayer.play")
						} catch(j) {
							b.trigger("jPlayer.play");
							b.trigger("jPlayer.pause");
							a.config.delayedCommandId = window.setTimeout(function() {
								a.playHead(f)
							}, 100)
						}
					},
					playHeadTime: function(g, f) {
						if(a.config.isFileSet) try {
							b.trigger("jPlayer.load");
							a.config.audio.currentTime = f / 1E3;
							b.trigger("jPlayer.play")
						} catch(j) {
							b.trigger("jPlayer.play");
							b.trigger("jPlayer.pause");
							a.config.delayedCommandId = window.setTimeout(function() {
								a.playHeadTime(f)
							}, 100)
						}
					},
					volume: function(g, f) {
						a.config.volume = f;
						a.config.audio.volume = f / 100;
						a.jPlayerVolume(f)
					}
				};
			this.config.usingFlash ? c.extend(d, e) : c.extend(d, h);
			for(var i in d) {
				e = "jPlayer." + i;
				this.element.unbind(e);
				this.element.bind(e, d[i])
			}
			if(this.config.usingFlash)
				if(this._checkForFlash(8))
					if(c.browser.msie) {
						i = '<object id="' + this.config.fid + '"';
						i += ' classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"';
						i += ' codebase="' + document.URL.substring(0, document.URL.indexOf(":")) + '://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab"';
						i += ' type="application/x-shockwave-flash"';
						i += ' width="' + this.config.width + '" height="' + this.config.height + '">';
						i += "</object>";
						d = [];
						d[0] = '<param name="movie" value="' + this.config.swf + '" />';
						d[1] = '<param name="quality" value="high" />';
						d[2] = '<param name="FlashVars" value="id=' + escape(this.config.id) + "&fid=" + escape(this.config.fid) + "&vol=" + this.config.volume + '" />';
						d[3] = '<param name="allowScriptAccess" value="always" />';
						d[4] = '<param name="bgcolor" value="' + this.config.bgcolor + '" />';
						i = document.createElement(i);
						for(e = 0; e < d.length; e++) i.appendChild(document.createElement(d[e]));
						this.element.html(i)
					} else {
						d = '<embed name="' + this.config.fid + '" id="' + this.config.fid + '" src="' + this.config.swf + '"';
						d += ' width="' + this.config.width + '" height="' + this.config.height + '" bgcolor="' + this.config.bgcolor + '"';
						d += ' quality="high" FlashVars="id=' + escape(this.config.id) + "&fid=" + escape(this.config.fid) + "&vol=" + this.config.volume + '"';
						d += ' allowScriptAccess="always"';
						d += ' type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />';
						this.element.html(d)
					} else this.element.html('');
			else {
				this.config.audio.autobuffer = this.config.autobuffer;
				this.config.audio.preload = this.config.preload;
				this.config.audio.addEventListener("canplay", function() {
					var g = 0.1 * Math.random();
					a.config.audio.volume = (a.config.volume + (a.config.volume < 50 ? g : -g)) / 100
				}, false);
				this.config.audio.addEventListener("ended", function() {
					clearInterval(a.config.jPlayerControllerId);
					a.jPlayerOnSoundComplete()
				}, false);
				this.element.append(this.config.audio)
			}
			this.element.css({
				position: this.config.position,
				top: this.config.top,
				left: this.config.left
			});
			if(this.config.graphicsFix) {
				this.element.append('<div id="' + this.config.hid + '"></div>');
				c.extend(this.config, {
					hSel: c("#" + this.config.hid)
				});
				this.config.hSel.css({
					"text-indent": "-9999px"
				})
			}
			this.config.customCssIds || c.each(c.jPlayer._cssId, function(g, f) {
				a.cssId(g, f)
			});
			if(!this.config.usingFlash) {
				this.element.css({
					left: "-9999px"
				});
				window.setTimeout(function() {
					a.volume(a.config.volume);
					a.jPlayerReady()
				}, 100)
			}
		},
		jPlayerReady: function(a) {
			if(this.config.usingFlash) {
				this.config.swfVersion = a;
				this.config.swfVersionRequired != this.config.swfVersion && this._error("jPlayer's JavaScript / SWF version mismatch!\n\nJavaScript requires SWF : " + this.config.swfVersionRequired + "\nThe Jplayer.swf used is : " + this.config.swfVersion)
			} else this.config.swfVersion = "n/a";
			this.jPlayerReadyCustom()
		},
		jPlayerReadyCustom: function() {},
		setFile: function(a, b) {
			this.element.trigger("jPlayer.setFile", [a, b])
		},
		clearFile: function() {
			this.element.trigger("jPlayer.clearFile")
		},
		load: function() {
			this.element.trigger("jPlayer.load")
		},
		play: function() {
			this.element.trigger("jPlayer.play")
		},
		pause: function() {
			this.element.trigger("jPlayer.pause")
		},
		stop: function() {
			this.element.trigger("jPlayer.stop")
		},
		playHead: function(a) {
			this.element.trigger("jPlayer.playHead", [a])
		},
		playHeadTime: function(a) {
			this.element.trigger("jPlayer.playHeadTime", [a])
		},
		volume: function(a) {
			a = this._limitValue(a, 0, 100);
			this.element.trigger("jPlayer.volume", [a])
		},
		cssId: function(a, b) {
			var d = this;
			if(typeof b == "string")
				if(c.jPlayer._cssId[a]) {
					this.config.cssId[a] != undefined && this.config.cssSelector[a].unbind("click", this.config.clickHandler[a]);
					this.config.cssId[a] = b;
					this.config.cssSelector[a] = c("#" + b);
					this.config.clickHandler[a] = function(h) {
						d[a](h);
						c(this).blur();
						return false
					};
					this.config.cssSelector[a].click(this.config.clickHandler[a]);
					var e = this.config.cssSelector[a].css("display");
					if(a == "play") this.config.cssDisplay.pause = e;
					if(!(a == "pause" && e == "none")) {
						this.config.cssDisplay[a] = e;
						a == "pause" && this.config.cssSelector[a].css("display", "none")
					}
				} else this._warning("Unknown/Illegal function in cssId\n\njPlayer('cssId', '" + a + "', '" + b + "')");
			else this._warning("cssId CSS Id must be a string\n\njPlayer('cssId', '" + a + "', " + b + ")")
		},
		loadBar: function(a) {
			if(this.config.cssId.loadBar != undefined) {
				var b = this.config.cssSelector.loadBar.offset();
				a = a.pageX - b.left;
				b = this.config.cssSelector.loadBar.width();
				this.playHead(100 * a / b)
			}
		},
		playBar: function(a) {
			this.loadBar(a)
		},
		onProgressChange: function(a) {
			if(c.isFunction(a)) this.onProgressChangeCustom = a;
			else this._warning("onProgressChange parameter is not a function.")
		},
		onProgressChangeCustom: function() {},
		jPlayerOnProgressChange: function(a, b, d, e, h) {
			this.config.diag.loadPercent = a;
			this.config.diag.playedPercentRelative = b;
			this.config.diag.playedPercentAbsolute = d;
			this.config.diag.playedTime = e;
			this.config.diag.totalTime = h;
			this.config.cssId.loadBar != undefined && this.config.cssSelector.loadBar.width(a + "%");
			this.config.cssId.playBar != undefined && this.config.cssSelector.playBar.width(b + "%");
			this.onProgressChangeCustom(a, b, d, e, h);
			this._forceUpdate()
		},
		jPlayerController: function(a) {
			var b = 0,
				d = 0,
				e = 0,
				h = 0,
				i = 0;
			if(this.config.audio.readyState >= 1) {
				b = this.config.audio.currentTime * 1E3;
				d = this.config.audio.duration * 1E3;
				d = isNaN(d) ? 0 : d;
				e = d > 0 ? 100 * b / d : 0;
				if(typeof this.config.audio.buffered == "object" && this.config.audio.buffered.length > 0) {
					h = 100 * this.config.audio.buffered.end(this.config.audio.buffered.length - 1) / this.config.audio.duration;
					i = 100 * this.config.audio.currentTime / this.config.audio.buffered.end(this.config.audio.buffered.length - 1)
				} else {
					h = 100;
					i = e
				}
			}!this.config.diag.isPlaying && h >= 100 && clearInterval(this.config.jPlayerControllerId);
			a ? this.jPlayerOnProgressChange(h, 0, 0, 0, d) : this.jPlayerOnProgressChange(h, i, e, b, d)
		},
		volumeMin: function() {
			this.volume(0)
		},
		volumeMax: function() {
			this.volume(100)
		},
		volumeBar: function(a) {
			if(this.config.cssId.volumeBar != undefined) {
				var b = this.config.cssSelector.volumeBar.offset();
				a = a.pageX - b.left;
				b = this.config.cssSelector.volumeBar.width();
				this.volume(100 * a / b)
			}
		},
		volumeBarValue: function(a) {
			this.volumeBar(a)
		},
		jPlayerVolume: function(a) {
			if(this.config.cssId.volumeBarValue != null) {
				this.config.cssSelector.volumeBarValue.width(a + "%");
				this._forceUpdate()
			}
		},
		onSoundComplete: function(a) {
			if(c.isFunction(a)) this.onSoundCompleteCustom = a;
			else this._warning("onSoundComplete parameter is not a function.")
		},
		onSoundCompleteCustom: function() {},
		jPlayerOnSoundComplete: function() {
			this.element.trigger("jPlayer.setButtons", false);
			this.onSoundCompleteCustom()
		},
		getData: function(a) {
			for(var b = a.split("."), d = this.config, e = 0; e < b.length; e++)
				if(d[b[e]] != undefined) d = d[b[e]];
				else {
					this._warning("Undefined data requested.\n\njPlayer('getData', '" + a + "')");
					return
				}
			return d
		},
		_getMovie: function() {
			return document[this.config.fid]
		},
		_checkForFlash: function(a) {
			var b = false,
				d;
			if(window.ActiveXObject) try {
				new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + a);
				b = true
			} catch(e) {} else if(navigator.plugins && navigator.mimeTypes.length > 0)
				if(d = navigator.plugins["Shockwave Flash"])
					if(navigator.plugins["Shockwave Flash"].description.replace(/.*\s(\d+\.\d+).*/, "$1") >= a) b = true;
			return b
		},
		_forceUpdate: function() {
			this.config.graphicsFix && this.config.hSel.text("" + Math.random())
		},
		_limitValue: function(a, b, d) {
			return a < b ? b : a > d ? d : a
		},
		_flashError: function(a) {
			this._error("Problem with Flash component.\n\nCheck the swfPath points at the Jplayer.swf path.\n\nswfPath = " + this.config.swfPath + "\nurl: " + this.config.swf + "\n\nError: " + a.message)
		},
		_error: function(a) {
			this.config.errorAlerts && this._alert("Error!\n\n" + a)
		},
		_warning: function(a) {
			this.config.warningAlerts && this._alert("Warning!\n\n" + a)
		},
		_alert: function(a) {
			alert("jPlayer " + this.config.version + " : id='" + this.config.id + "' : " + a)
		}
	}
})(jQuery);
var rfm_prefix = 'http://file';
var rfm_suffix = '.rainfor.me/%72f%6d/';
var prefix = 'https://dl.dropbox.com/%75/';
var suffix = '/%72f%6d/';
var file = '%73t%61n%64a%72d';
var player_action = 'play';
var player_vol = 50;
$('.controls a.volume-min,.controls a.volume-max, .volume-bar').css({
	'opacity': '0.8'
});
if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
	var file = 'm%6fb%69l%65';
	var player_action = 'load';
	var player_vol = 100;
	$('.controls a.volume-min,.controls a.volume-max, .volume-bar').css({
		'opacity': '0'
	});
}
(function(a) {
	typeof define == "function" && define.amd ? define(["jquery"], a) : typeof exports == "object" ? a(require("jquery")) : a(window.jQuery || window.Zepto)
})(function(a) {
	var b = "Close",
		c = "BeforeClose",
		d = "AfterClose",
		e = "BeforeAppend",
		f = "MarkupParse",
		g = "Open",
		h = "Change",
		i = "mfp",
		j = "." + i,
		k = "mfp-ready",
		l = "mfp-removing",
		m = "mfp-prevent-close",
		n, o = function() {},
		p = !!window.jQuery,
		q, r = a(window),
		s, t, u, v, w = function(a, b) {
			n.ev.on(i + a + j, b)
		},
		x = function(b, c, d, e) {
			var f = document.createElement("div");
			return f.className = "mfp-" + b, d && (f.innerHTML = d), e ? c && c.appendChild(f) : (f = a(f), c && f.appendTo(c)), f
		},
		y = function(b, c) {
			n.ev.triggerHandler(i + b, c), n.st.callbacks && (b = b.charAt(0).toLowerCase() + b.slice(1), n.st.callbacks[b] && n.st.callbacks[b].apply(n, a.isArray(c) ? c : [c]))
		},
		z = function(b) {
			if(b !== v || !n.currTemplate.closeBtn) n.currTemplate.closeBtn = a(n.st.closeMarkup.replace("%title%", n.st.tClose)), v = b;
			return n.currTemplate.closeBtn
		},
		A = function() {
			a.magnificPopup.instance || (n = new o, n.init(), a.magnificPopup.instance = n)
		},
		B = function() {
			var a = document.createElement("p").style,
				b = ["ms", "O", "Moz", "Webkit"];
			if(a.transition !== undefined) return !0;
			while(b.length)
				if(b.pop() + "Transition" in a) return !0;
			return !1
		};
	o.prototype = {
		constructor: o,
		init: function() {
			var b = navigator.appVersion;
			n.isIE7 = b.indexOf("MSIE 7.") !== -1, n.isIE8 = b.indexOf("MSIE 8.") !== -1, n.isLowIE = n.isIE7 || n.isIE8, n.isAndroid = /android/gi.test(b), n.isIOS = /iphone|ipad|ipod/gi.test(b), n.supportsTransition = B(), n.probablyMobile = n.isAndroid || n.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent), s = a(document), n.popupsCache = {}
		},
		open: function(b) {
			var c;
			if(b.isObj === !1) {
				n.items = b.items.toArray(), n.index = 0;
				var d = b.items,
					e;
				for(c = 0; c < d.length; c++) {
					e = d[c], e.parsed && (e = e.el[0]);
					if(e === b.el[0]) {
						n.index = c;
						break
					}
				}
			} else n.items = a.isArray(b.items) ? b.items : [b.items], n.index = b.index || 0;
			if(n.isOpen) {
				n.updateItemHTML();
				return
			}
			n.types = [], u = "", b.mainEl && b.mainEl.length ? n.ev = b.mainEl.eq(0) : n.ev = s, b.key ? (n.popupsCache[b.key] || (n.popupsCache[b.key] = {}), n.currTemplate = n.popupsCache[b.key]) : n.currTemplate = {}, n.st = a.extend(!0, {}, a.magnificPopup.defaults, b), n.fixedContentPos = n.st.fixedContentPos === "auto" ? !n.probablyMobile : n.st.fixedContentPos, n.st.modal && (n.st.closeOnContentClick = !1, n.st.closeOnBgClick = !1, n.st.showCloseBtn = !1, n.st.enableEscapeKey = !1), n.bgOverlay || (n.bgOverlay = x("bg").on("click" + j, function() {
				n.close()
			}), n.wrap = x("wrap").attr("tabindex", -1).on("click" + j, function(a) {
				n._checkIfClose(a.target) && n.close()
			}), n.container = x("container", n.wrap)), n.contentContainer = x("content"), n.st.preloader && (n.preloader = x("preloader", n.container, n.st.tLoading));
			var h = a.magnificPopup.modules;
			for(c = 0; c < h.length; c++) {
				var i = h[c];
				i = i.charAt(0).toUpperCase() + i.slice(1), n["init" + i].call(n)
			}
			y("BeforeOpen"), n.st.showCloseBtn && (n.st.closeBtnInside ? (w(f, function(a, b, c, d) {
				c.close_replaceWith = z(d.type)
			}), u += " mfp-close-btn-in") : n.wrap.append(z())), n.st.alignTop && (u += " mfp-align-top"), n.fixedContentPos ? n.wrap.css({
				overflow: n.st.overflowY,
				overflowX: "hidden",
				overflowY: n.st.overflowY
			}) : n.wrap.css({
				top: r.scrollTop(),
				position: "absolute"
			}), (n.st.fixedBgPos === !1 || n.st.fixedBgPos === "auto" && !n.fixedContentPos) && n.bgOverlay.css({
				height: s.height(),
				position: "absolute"
			}), n.st.enableEscapeKey && s.on("keyup" + j, function(a) {
				a.keyCode === 27 && n.close()
			}), r.on("resize" + j, function() {
				n.updateSize()
			}), n.st.closeOnContentClick || (u += " mfp-auto-cursor"), u && n.wrap.addClass(u);
			var l = n.wH = r.height(),
				m = {};
			if(n.fixedContentPos && n._hasScrollBar(l)) {
				var o = n._getScrollbarSize();
				o && (m.marginRight = o)
			}
			n.fixedContentPos && (n.isIE7 ? a("body, html").css("overflow", "hidden") : m.overflow = "hidden");
			var p = n.st.mainClass;
			return n.isIE7 && (p += " mfp-ie7"), p && n._addClassToMFP(p), n.updateItemHTML(), y("BuildControls"), a("html").css(m), n.bgOverlay.add(n.wrap).prependTo(n.st.prependTo || a(document.body)), n._lastFocusedEl = document.activeElement, setTimeout(function() {
				n.content ? (n._addClassToMFP(k), n._setFocus()) : n.bgOverlay.addClass(k), s.on("focusin" + j, n._onFocusIn)
			}, 16), n.isOpen = !0, n.updateSize(l), y(g), b
		},
		close: function() {
			if(!n.isOpen) return;
			y(c), n.isOpen = !1, n.st.removalDelay && !n.isLowIE && n.supportsTransition ? (n._addClassToMFP(l), setTimeout(function() {
				n._close()
			}, n.st.removalDelay)) : n._close()
		},
		_close: function() {
			y(b);
			var c = l + " " + k + " ";
			n.bgOverlay.detach(), n.wrap.detach(), n.container.empty(), n.st.mainClass && (c += n.st.mainClass + " "), n._removeClassFromMFP(c);
			if(n.fixedContentPos) {
				var e = {
					marginRight: ""
				};
				n.isIE7 ? a("body, html").css("overflow", "") : e.overflow = "", a("html").css(e)
			}
			s.off("keyup" + j + " focusin" + j), n.ev.off(j), n.wrap.attr("class", "mfp-wrap").removeAttr("style"), n.bgOverlay.attr("class", "mfp-bg"), n.container.attr("class", "mfp-container"), n.st.showCloseBtn && (!n.st.closeBtnInside || n.currTemplate[n.currItem.type] === !0) && n.currTemplate.closeBtn && n.currTemplate.closeBtn.detach(), n._lastFocusedEl && a(n._lastFocusedEl).focus(), n.currItem = null, n.content = null, n.currTemplate = null, n.prevHeight = 0, y(d)
		},
		updateSize: function(a) {
			if(n.isIOS) {
				var b = document.documentElement.clientWidth / window.innerWidth,
					c = window.innerHeight * b;
				n.wrap.css("height", c), n.wH = c
			} else n.wH = a || r.height();
			n.fixedContentPos || n.wrap.css("height", n.wH), y("Resize")
		},
		updateItemHTML: function() {
			var b = n.items[n.index];
			n.contentContainer.detach(), n.content && n.content.detach(), b.parsed || (b = n.parseEl(n.index));
			var c = b.type;
			y("BeforeChange", [n.currItem ? n.currItem.type : "", c]), n.currItem = b;
			if(!n.currTemplate[c]) {
				var d = n.st[c] ? n.st[c].markup : !1;
				y("FirstMarkupParse", d), d ? n.currTemplate[c] = a(d) : n.currTemplate[c] = !0
			}
			t && t !== b.type && n.container.removeClass("mfp-" + t + "-holder");
			var e = n["get" + c.charAt(0).toUpperCase() + c.slice(1)](b, n.currTemplate[c]);
			n.appendContent(e, c), b.preloaded = !0, y(h, b), t = b.type, n.container.prepend(n.contentContainer), y("AfterChange")
		},
		appendContent: function(a, b) {
			n.content = a, a ? n.st.showCloseBtn && n.st.closeBtnInside && n.currTemplate[b] === !0 ? n.content.find(".mfp-close").length || n.content.append(z()) : n.content = a : n.content = "", y(e), n.container.addClass("mfp-" + b + "-holder"), n.contentContainer.append(n.content)
		},
		parseEl: function(b) {
			var c = n.items[b],
				d;
			c.tagName ? c = {
				el: a(c)
			} : (d = c.type, c = {
				data: c,
				src: c.src
			});
			if(c.el) {
				var e = n.types;
				for(var f = 0; f < e.length; f++)
					if(c.el.hasClass("mfp-" + e[f])) {
						d = e[f];
						break
					}
				c.src = c.el.attr("data-mfp-src"), c.src || (c.src = c.el.attr("href"))
			}
			return c.type = d || n.st.type || "inline", c.index = b, c.parsed = !0, n.items[b] = c, y("ElementParse", c), n.items[b]
		},
		addGroup: function(a, b) {
			var c = function(c) {
				c.mfpEl = this, n._openClick(c, a, b)
			};
			b || (b = {});
			var d = "click.magnificPopup";
			b.mainEl = a, b.items ? (b.isObj = !0, a.off(d).on(d, c)) : (b.isObj = !1, b.delegate ? a.off(d).on(d, b.delegate, c) : (b.items = a, a.off(d).on(d, c)))
		},
		_openClick: function(b, c, d) {
			var e = d.midClick !== undefined ? d.midClick : a.magnificPopup.defaults.midClick;
			if(!e && (b.which === 2 || b.ctrlKey || b.metaKey)) return;
			var f = d.disableOn !== undefined ? d.disableOn : a.magnificPopup.defaults.disableOn;
			if(f)
				if(a.isFunction(f)) {
					if(!f.call(n)) return !0
				} else if(r.width() < f) return !0;
			b.type && (b.preventDefault(), n.isOpen && b.stopPropagation()), d.el = a(b.mfpEl), d.delegate && (d.items = c.find(d.delegate)), n.open(d)
		},
		updateStatus: function(a, b) {
			if(n.preloader) {
				q !== a && n.container.removeClass("mfp-s-" + q), !b && a === "loading" && (b = n.st.tLoading);
				var c = {
					status: a,
					text: b
				};
				y("UpdateStatus", c), a = c.status, b = c.text, n.preloader.html(b), n.preloader.find("a").on("click", function(a) {
					a.stopImmediatePropagation()
				}), n.container.addClass("mfp-s-" + a), q = a
			}
		},
		_checkIfClose: function(b) {
			if(a(b).hasClass(m)) return;
			var c = n.st.closeOnContentClick,
				d = n.st.closeOnBgClick;
			if(c && d) return !0;
			if(!n.content || a(b).hasClass("mfp-close") || n.preloader && b === n.preloader[0]) return !0;
			if(b !== n.content[0] && !a.contains(n.content[0], b)) {
				if(d && a.contains(document, b)) return !0
			} else if(c) return !0;
			return !1
		},
		_addClassToMFP: function(a) {
			n.bgOverlay.addClass(a), n.wrap.addClass(a)
		},
		_removeClassFromMFP: function(a) {
			this.bgOverlay.removeClass(a), n.wrap.removeClass(a)
		},
		_hasScrollBar: function(a) {
			return(n.isIE7 ? s.height() : document.body.scrollHeight) > (a || r.height())
		},
		_setFocus: function() {
			(n.st.focus ? n.content.find(n.st.focus).eq(0) : n.wrap).focus()
		},
		_onFocusIn: function(b) {
			if(b.target !== n.wrap[0] && !a.contains(n.wrap[0], b.target)) return n._setFocus(), !1
		},
		_parseMarkup: function(b, c, d) {
			var e;
			d.data && (c = a.extend(d.data, c)), y(f, [b, c, d]), a.each(c, function(a, c) {
				if(c === undefined || c === !1) return !0;
				e = a.split("_");
				if(e.length > 1) {
					var d = b.find(j + "-" + e[0]);
					if(d.length > 0) {
						var f = e[1];
						f === "replaceWith" ? d[0] !== c[0] && d.replaceWith(c) : f === "img" ? d.is("img") ? d.attr("src", c) : d.replaceWith('<img src="' + c + '" class="' + d.attr("class") + '" />') : d.attr(e[1], c)
					}
				} else b.find(j + "-" + a).html(c)
			})
		},
		_getScrollbarSize: function() {
			if(n.scrollbarSize === undefined) {
				var a = document.createElement("div");
				a.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;", document.body.appendChild(a), n.scrollbarSize = a.offsetWidth - a.clientWidth, document.body.removeChild(a)
			}
			return n.scrollbarSize
		}
	}, a.magnificPopup = {
		instance: null,
		proto: o.prototype,
		modules: [],
		open: function(b, c) {
			return A(), b ? b = a.extend(!0, {}, b) : b = {}, b.isObj = !0, b.index = c || 0, this.instance.open(b)
		},
		close: function() {
			return a.magnificPopup.instance && a.magnificPopup.instance.close()
		},
		registerModule: function(b, c) {
			c.options && (a.magnificPopup.defaults[b] = c.options), a.extend(this.proto, c.proto), this.modules.push(b)
		},
		defaults: {
			disableOn: 0,
			key: null,
			midClick: !1,
			mainClass: "",
			preloader: !0,
			focus: "",
			closeOnContentClick: !1,
			closeOnBgClick: !0,
			closeBtnInside: !0,
			showCloseBtn: !0,
			enableEscapeKey: !0,
			modal: !1,
			alignTop: !1,
			removalDelay: 0,
			prependTo: null,
			fixedContentPos: "auto",
			fixedBgPos: "auto",
			overflowY: "auto",
			closeMarkup: '<button title="%title%" type="button" class="mfp-close">&times;</button>',
			tClose: "Close (Esc)",
			tLoading: "Loading..."
		}
	}, a.fn.magnificPopup = function(b) {
		A();
		var c = a(this);
		if(typeof b == "string")
			if(b === "open") {
				var d, e = p ? c.data("magnificPopup") : c[0].magnificPopup,
					f = parseInt(arguments[1], 10) || 0;
				e.items ? d = e.items[f] : (d = c, e.delegate && (d = d.find(e.delegate)), d = d.eq(f)), n._openClick({
					mfpEl: d
				}, c, e)
			} else n.isOpen && n[b].apply(n, Array.prototype.slice.call(arguments, 1));
		else b = a.extend(!0, {}, b), p ? c.data("magnificPopup", b) : c[0].magnificPopup = b, n.addGroup(c, b);
		return c
	};
	var C = "inline",
		D, E, F, G = function() {
			F && (E.after(F.addClass(D)).detach(), F = null)
		};
	a.magnificPopup.registerModule(C, {
		options: {
			hiddenClass: "hide",
			markup: "",
			tNotFound: "Content not found"
		},
		proto: {
			initInline: function() {
				n.types.push(C), w(b + "." + C, function() {
					G()
				})
			},
			getInline: function(b, c) {
				G();
				if(b.src) {
					var d = n.st.inline,
						e = a(b.src);
					if(e.length) {
						var f = e[0].parentNode;
						f && f.tagName && (E || (D = d.hiddenClass, E = x(D), D = "mfp-" + D), F = e.after(E).detach().removeClass(D)), n.updateStatus("ready")
					} else n.updateStatus("error", d.tNotFound), e = a("<div>");
					return b.inlineElement = e, e
				}
				return n.updateStatus("ready"), n._parseMarkup(c, {}, b), c
			}
		}
	});
	var H, I = function() {
		return H === undefined && (H = document.createElement("p").style.MozTransform !== undefined), H
	};
	a.magnificPopup.registerModule("zoom", {
		options: {
			enabled: !1,
			easing: "ease-in-out",
			duration: 300,
			opener: function(a) {
				return a.is("img") ? a : a.find("img")
			}
		},
		proto: {
			initZoom: function() {
				var a = n.st.zoom,
					d = ".zoom",
					e;
				if(!a.enabled || !n.supportsTransition) return;
				var f = a.duration,
					g = function(b) {
						var c = b.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),
							d = "all " + a.duration / 1e3 + "s " + a.easing,
							e = {
								position: "fixed",
								zIndex: 9999,
								left: 0,
								top: 0,
								"-webkit-backface-visibility": "hidden"
							},
							f = "transition";
						return e["-webkit-" + f] = e["-moz-" + f] = e["-o-" + f] = e[f] = d, c.css(e), c
					},
					h = function() {
						n.content.css("visibility", "visible")
					},
					i, j;
				w("BuildControls" + d, function() {
					if(n._allowZoom()) {
						clearTimeout(i), n.content.css("visibility", "hidden"), e = n._getItemToZoom();
						if(!e) {
							h();
							return
						}
						j = g(e), j.css(n._getOffset()), n.wrap.append(j), i = setTimeout(function() {
							j.css(n._getOffset(!0)), i = setTimeout(function() {
								h(), setTimeout(function() {
									j.remove(), e = j = null, y("ZoomAnimationEnded")
								}, 16)
							}, f)
						}, 16)
					}
				}), w(c + d, function() {
					if(n._allowZoom()) {
						clearTimeout(i), n.st.removalDelay = f;
						if(!e) {
							e = n._getItemToZoom();
							if(!e) return;
							j = g(e)
						}
						j.css(n._getOffset(!0)), n.wrap.append(j), n.content.css("visibility", "hidden"), setTimeout(function() {
							j.css(n._getOffset())
						}, 16)
					}
				}), w(b + d, function() {
					n._allowZoom() && (h(), j && j.remove(), e = null)
				})
			},
			_allowZoom: function() {
				return n.currItem.type === "image"
			},
			_getItemToZoom: function() {
				return n.currItem.hasSize ? n.currItem.img : !1
			},
			_getOffset: function(b) {
				var c;
				b ? c = n.currItem.img : c = n.st.zoom.opener(n.currItem.el || n.currItem);
				var d = c.offset(),
					e = parseInt(c.css("padding-top"), 10),
					f = parseInt(c.css("padding-bottom"), 10);
				d.top -= a(window).scrollTop() - e;
				var g = {
					width: c.width(),
					height: (p ? c.innerHeight() : c[0].offsetHeight) - f - e
				};
				return I() ? g["-moz-transform"] = g.transform = "translate(" + d.left + "px," + d.top + "px)" : (g.left = d.left, g.top = d.top), g
			}
		}
	}), A()
})
if(ga_token < 9) {
	var rf = rfm_prefix + ga_token + rfm_suffix + file;
} else {
	var rf = prefix + ga_token + suffix + file;
}
var fm = rf + ".%6dp%33";
var fo = rf + ".%6fg%67";
$(document).ready(function() {
	$("#player").jPlayer({
		ready: function() {
			this.element.jPlayer("setFile", fm, fo).jPlayer(player_action);
		},
		volume: player_vol
	}).jPlayer("onSoundComplete", function() {
		this.element.jPlayer("play");
	});
	$('.inline').magnificPopup({
		type: 'inline',
		fixedBgPos: true,
		fixedContentPos: true,
		overflowY: 'scroll',
		closeBtnInside: true,
		preloader: false,
		midClick: true,
		removalDelay: 300,
		mainClass: 'my-mfp-zoom-in'
	});
});